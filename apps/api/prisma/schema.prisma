// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  bio         String?
  avatar      String?
  password    String 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  recipes     Recipe[]
}

model Post {
  id          Int      @id @default(autoincrement())
  slug        String?   @unique
  title       String
  content     String
  thumbnail   String?
  published   Boolean
  
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  comments    Comment[] 

  tags        Tag[]     @relation("PostTags")   

  likes       Like[]      
}

model Recipe {
  id          Int      @id @default(autoincrement())
  slug        String?   @unique
  title       String
  content     String
  thumbnail   String?
  published   Boolean
  
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  likes       Like[]   

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])   

  comments    Comment[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  recipes     Recipe[]
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt 

  authorId    Int?
  author      User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)

  anonymousName   String?   
  anonymousEmail  String?
  
  postId      Int?
  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)

  recipeId  Int?
  recipe    Recipe?     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  
  posts       Post[]    @relation("PostTags")
}

model Like {
  id          Int       @id @default(autoincrement())

  userId      Int
  postId      Int?
  recipeId    Int?

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  recipe      Recipe?    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}
